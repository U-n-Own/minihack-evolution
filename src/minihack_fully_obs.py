import gym
import minihack
import numpy as np

"""
When we have i,j indexs, we can define the 15x15 submatrix (of int) 
that describes the randon room with command: obs['chars'][i:i+15, j:j+15]
In each matrix entrance we can have:  
-the int 46 that represent the empty floor
-the int 60 thath represent the staircase going up (start position)
-the int 62 that represent the staircase going down (the goal)
-the int 64 that represent the agent position
"""

"""
def printM(M):
     '''
    Print the matrix mat in int characters. 
    Note that the matrix is equal to the random room generated by MiniHack
    '''
    for x in range(len(M[:,1])):
        for y in range(len(M[1,:])):
            print(M[x][y], end=' ') 
        print('\n')
"""

def print_room(environment):
    """
    Print the room in ASCII characters. 
    Note that the matrix is equal to the random room generated by MiniHack
    """

    for row in range(len(environment[:,1])):
        for col in range(len(environment[1,:])):
            print(chr(environment[row][col]), end=' ') 
        print('\n')

def search_environment_indexes(environment):
    """ 
    Searching enviroment indexes, usually are the same, 
    maybe we can calculate theme once and them use as a costant
    if change for each different room maybe this will be useful then
    """
    
    i=j=temp=0

    #Find the indexes [x,y] from which to start extracting the submatrix
    for row in range(len(environment[:,1])):
        for col in range(len(environment[1,:])):
            if temp == 0 and int(environment[row][col]) != 32:
                i = row
                j = col
                temp=1
    return i,j      

def search_environment_agent_position(environment: np.ndarray):
    """ Return agent position inside the environment """
    
    i,j=search_environment_indexes(environment)
    
    for row in range(len(environment[:,1])):
        for col in range(len(environment[1,:])):
            if int(environment[row][col]) == 64:
                return row-i, col-j

def search_environment_goal_position(environment: np.ndarray):
    """ Return staircase position inside the environment """
    
    i,j=search_environment_indexes(environment)
    
    for row in range(len(environment[:,1])):
        for col in range(len(environment[1,:])):
            if int(environment[row][col]) == 62:
                return row-i, col-j
