import gym
import minihack
import numpy as np

def printM_A(M):
    '''
    Print the matrix mat in ASCII characters. 
    Note that the matrix is equal to the random room generated by MiniHack
    '''
    for x in range(len(M[:,1])):
        for y in range(len(M[1,:])):
            print(chr(M[x][y]), end=' ') 
        print('\n')

"""
def printM(M):
     '''
    Print the matrix mat in int characters. 
    Note that the matrix is equal to the random room generated by MiniHack
    '''
    for x in range(len(M[:,1])):
        for y in range(len(M[1,:])):
            print(M[x][y], end=' ') 
        print('\n')
"""

def index(M):
    #initialize counters 
    i=j=temp=0

    #Find the indexes [x,y] from which to start extracting the submatrix
    for x in range(len(M[:,1])):
        for y in range(len(M[1,:])):
            if temp==0 and int(M[x][y]) != 32:
                i=x
                j=y
                temp=1
    return i,j             

def main():
    #Generate a Room-15x15 task
    env=gym.make(
        "MiniHack-Room-Random-15x15-v0",
         observation_keys=("chars", "colors", "specials", "pixel"),
    )
 
    obs = env.reset() #Generate a new environment and save the describtions arrays in obs
    env.render() #Print the room 
    """
    obs contains the "glyphs","chars",...,"pixel" arrays which describe the room
    See documentation for information on arrays
    """
    i,j=index(obs['chars'])
    
    """
    When we have i,j indexs, we can define the 15x15 submatrix (of int) 
    that describes the randon room with command: obs['chars'][i:i+15, j:j+15]
    In each matrix entrance we can have:  
    -the int 46 that represent the empty floor
    -the int 60 thath represent the staircase going up (start position)
    -the int 62 that represent the staircase going down (the goal)
    -the int 64 that represent the agent position
    """

    print("The matrix of int that represent the random room is:")
    print(obs['chars'][i:i+15, j:j+15])
    print("\n\n\n\n")

    print("Tha matrix in ASCII that represent the random room is:")
    printM_A(obs['chars'][i:i+15, j:j+15])

    
    (x,y) = np.where(obs['chars'] == 62)
    
    x=x.astype(int)[0]
    print(x)
    y=y.astype(int)[0]
    print(y)

if __name__ == "__main__":
    main()
